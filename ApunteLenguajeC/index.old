<HTML>
<HEAD>
	<TITLE>cc31a</TITLE>
	<META NAME="AUTHOR" CONTENT="Patricio Poblete">
	<STYLE>
	<!--
		H1 { font-family: "helvetica", sans-serif; text-align: left }
		H2 { font-family: "helvetica", sans-serif; text-align: left }
		H3 { font-family: "helvetica", sans-serif; text-align: left }
		TD { font-family: "helvetica", sans-serif }
		P { font-family: "helvetica", sans-serif }
		TT { font-family: "courier" }
		PRE { font-family: "courier" }
	-->
	</STYLE>
</HEAD>
<BODY bgcolor=white>
<table width=100% bgcolor=wheat><tr><td>
<center>
<font size="+3"><b>cc31a Desarrollo de Software de Sistemas</b></font>
<p>
<i>
Patricio Poblete
(<A HREF="mailto:ppoblete@dcc.uchile.cl">ppoblete@dcc.uchile.cl</A>)
</i>
</center>
</td></tr></table>

<p>
<H1>Introducción al Lenguaje C</H1>
<p>
<ol>
<li><a href="#1">Un primer programa</a>
<li><a href="#2">Entrada/salida de caracteres</a>
<li><a href="#3">Arreglos</a>
<li><a href="#4">Funciones</a>
<li><a href="#5">Arreglos de caracteres</a>
<li><a href="#6">Variables externas</a>
<li><a href="#7">Conversiones de caracteres</a>
<li><a href="#8">Operaciones con bits</a>
<li><a href="#9">Prioridad de Operadores</a>
<li><a href="#10">Instrucciones de Control</a>
<li><a href="#11">Punteros y Arreglos</a>
</ol>
<p>
<a name="1"><h2>Un primer programa</h2></a>
<p>
El siguiente es un programa que al ejecutarse escribe
<tt>Hola</tt> en la pantalla:

<program hola.c>
#include <stdio.h>

main()
  {
    printf("Hola\n");
  }
</program>

Para compilar y ejecutar este programa se utilizan los comandos siguientes:
<p>
<pre><b>
            % cc hola.c
            % ./a.out
</b></pre>
<p>
<i>Ejemplo</i>: Conversión Fahrenheit-Celsius (C=(5/9)*(F-32))

<program fahrenheit.c>
#include <stdio.h>

/* Imprime tabla Fahrenheit-Celsius */

main()
  {
    int f, c;
    int min, max, step;

    min=0;
    max=300;
    step=20;

    f=min;
    while(f<=max)
      {
        c=5*(f-32)/9;
        printf("%d\t%d\n", f, c);
        f=f+step;
      }
  }
</program>
<p>
Versión más compacta:
<program>
for(f=min; f<=max; f+=step)
    printf("%d\t%d\n", f, 5*(f-32)/9);
</program>
<p>
Tipos de datos:
<p>
<pre><b>
    int
    float
    char
    short
    long
    double
</b></pre>
<p>
Para tener más precisión podemos declarar <tt>f</tt> como <tt>float</tt>:
<p>
<program>
float f;

for(f=min; f<=max; f+=step)
    printf("%3.0f %6.1f\n", f, (5.0/9.0)*(f-32.0));
</program>
<p>
Constantes simbólicas:
<p>
<program>
#define MIN 0
#define MAX 300
#define STEP 20

for(f=MIN; f<=MAX; f+=STEP)
    . . .
</program>
<p>
Reuniendo todo lo anterior, tenemos la siguiente versión para el programa:
<p>
<program fahrenheit2.c>
#include <stdio.h>

#define MIN 0
#define MAX 300
#define STEP 20

/* Imprime tabla Fahrenheit-Celsius */

main()
  {
    float f;

    for(f=MIN; f<=MAX; f+=STEP)
        printf("%3.0f %6.1f\n", f, (5.0/9.0)*(f-32.0));
  }
</program>

<p>
<a name="2"><h2>Entrada/salida de caracteres</h2></a>
<p>
<program>
int c; /* debe declararse int, no char */

c = getchar();  /* lee desde la entrada standard */
                /* retorna EOF al llegar al fin de archivo */
putchar(c);
</program>
<p>
<i>Ejemplo:</i> Copiar entrada hacia salida
<p>
<program copia.c>
#include <stdio.h>

/* Copiar entrada hacia salida */

main()
  {
    int c;

    c=getchar();
    while(c!=EOF)
      {
        putchar(c);
        c=getchar();
      }
  }
</program>
<p>
Versión más compacta:
<p>
<program copia2.c>
#include <stdio.h>

/* Copiar entrada hacia salida */

main()
  {
    int c;

    while((c=getchar())!=EOF)
        putchar(c);
  }
</program>
<p>
Hay que tener cuidado con la parentización. Lo siguiente
<program>
while(c=getchar() != EOF)
</program>
<p>
estaría mal, porque el operador <tt>!=</tt> tiene mayor prioridad que
la asignación.
<p>
<i>Uso:</i>
<p>
<pre><b>
        % ./a.out
                             Lee del teclado y escribe en pantalla

        % ./a.out &lt;arch1
                             Copia de arch1 a la pantalla

        % ./a.out &lt;arch2 >arch2
                             Copia de arch1 a arch2

        % ./a.out >arch2
                             Guarda en arch2 lo que se tipea en el teclado
</b></pre>
<p>
<i>Ejemplo:</i>
<p>
<program cuentac.c>
/* Cuenta caracteres */

#include <stdio.h>

main()
  {
    int nc;

    nc=0;
    while(getchar()!=EOF)
        ++nc;

    printf("%d\n", nc);
  }
</program>
<p>
<p>
<i>Ejemplo:</i>
<p>
<program cuental.c>
/* Cuenta líneas */

#include <stdio.h>

main()
  {
    int c, nl;

    nl=0;
    while((c=getchar())!=EOF)
        if(c=='\n')
            ++nl;

    printf("%d\n", nl);
}
</program>
<p>
<i>Otras instrucciones:</i>
<p>
<program>
      if(    )                  if(    )
        {                         {
          . . .                     . . .
        }                         }
                                else
                                  {
                                    . . .
                                  }
</program>

<p>
<a name="3"><h2>Arreglos</h2></a>
<p>
<i>Ejemplo:</i> Contar cuantas veces aparece cada dígito.
<p>
Para esto, llevamos un conjunto de 10 contadores, para cada uno
de los dígitos. Esto es un arreglo <tt><b>a</b></tt>en donde el contador
asociado al dígito
<tt><b>c</b></tt> es
<tt><b>a[c-'0']</b></tt>.
<p>
<program cuentad.c>
/* Cuenta dígitos */

#include <stdio.h>

main()
  {
    int c, i;
    int a[10];

    for(i=0; i<=9; ++i)
        a[i]=0;

    while((c=getchar())!=EOF)
        if(c>='0' && c<='9')
            ++a[c-'0'];

    for(i=0; i<=9; ++i)
        printf("%d    %d\n", i, a[i]);
  }
</program>

<p>
<a name="4"><h2>Funciones</h2></a>
<p>
<i>Ejemplo:</i> Elevación a potencia (cálculo de a<sup>n</sup>)
<p>
<program potencia.c>
#include <stdio.h>

/* Función que calcula elevación a potencia */
int potencia(int a, int n)
  {
    int i, p;

    p=1;
    for(i=1; i<=n; ++i)
        p*=a;

    return p;
  }

/* Programa de prueba que imprime potencias de 2 y de -3 */
main()
  {
    int i;

    for(i=0; i<=10; ++i)
        printf("%2d %6d %6d\n",
            i, potencia(2,i), potencia(-3,i));

    return 0; /* para indicar fin OK */
  }
</program>
<p>
El traspaso de parámetros es por valor.
Los parámetros son variables locales y pueden ser modificados sin
problema.
<p>
<program>
int potencia(int a, int n)
  {
    int p;

    for(p=1; n>0; --n)
        p*=a;

    return p;
  }
</program>
<p>
<a name="5"><h2>Arreglos de caracteres</h2></a>
<p>
Para almacenar un string se usa un arreglos de <tt><b>char</b>s</tt>,
marcando el fin del string con un caracter nulo
(<tt><b>'\0'</b></tt>).
Una constante de tipo string (<tt><b>"..."</b></tt>)
tiene automáticamente un caracter nulo al final.
<p>
<i>Ejemplo</i>: Encontrar el largo de la línea más larga
<program maxlinea.c>
#include <stdio.h>

#define MAXLINEA 1000

/* Lee una linea en arreglo s de largo máximo lim */
/* Retorna 0 si encuentra fin de archivo */
int getline(char s[], int lim)
  {
    int c, i;

    for(i=0; i<lim-1
          && (c=getchar())!=EOF
          && c!='\n'; ++i)
        s[i]=c;
    if(c=='\n')
      {
        s[i]=c;
        ++i;
      }
    s[i]='\0';

    return i;
  }

/* Programa que imprime el largo de la línea más larga */
main()
  {
    int largo, maxlargo;
    char linea[MAXLINEA];

    maxlargo=0;
    while((largo=getline(linea, MAXLINEA))>0)
        if(largo>maxlargo)
            maxlargo=largo;

    printf("La línea más larga tiene %d caracteres\n", maxlargo);
  }
</program>
¿Cómo imprimir <i>la</i> línea más larga?
<p>
Para recordar la línea más larga no basta con hacer
<program>
char larga[MAXLINEA];

...

if(largo>maxlargo)
  {
    maxlargo=largo;
    larga=linea;              /* ERROR */
  }
</program>
porque esto no copia los caracteres.
En lugar de ello, habría que llamar a una función que copia los
caracteres uno por uno:
<p>
<i>Ejemplo</i>: Encontrar la línea más larga
<program maxlinea2.c>
#include <stdio.h>

#define MAXLINEA 1000

/* Copia desde -> hacia */
void copia(char hacia[], char desde[])
  {
    int i;

    for(i=0; (hacia[i]=desde[i])!='\0'; ++i)
        ;
  }

/* Lee una linea en arreglo s de largo máximo lim */
/* Retorna 0 si encuentra fin de archivo */
int getline(char s[], int lim)
  {
    int c, i;

    for(i=0; i<lim-1
          && (c=getchar())!=EOF
          && c!='\n'; ++i)
        s[i]=c;
    if(c=='\n')
      {
        s[i]=c;
        ++i;
      }
    s[i]='\0';

    return i;
  }

/* Programa que imprime la línea más larga */
main()
  {
    int largo, maxlargo;
    char linea[MAXLINEA], larga[MAXLINEA];

    maxlargo=0;
    while((largo=getline(linea, MAXLINEA))>0)
        if(largo>maxlargo)
          {
            maxlargo=largo;
            copia(larga, linea);
          }

    printf("La línea más larga es:\n%s\n", larga);
  }
</program>
<p>
En realidad hay funciones predefinidas para realizar algunas
de estas operaciones de strings.
<p>
En lugar de <tt><b>getline</b></tt> se usa
<program>
char[] fgets(char s[], int max, FILE *stream)
</program>
Al llamar a esta función, si queremos que lea de su entrada standard,
hay que invocarla con <tt><b>stdin</b></tt> como tercer parámetro.
<p>
Las siguientes funciones requieren incluir un nuevo archivo de encabezamiento:
<program>
#include <string.h>
</program>
En lugar de <tt><b>copia</b></tt> se usa
<program>
char[] strcpy(char to[], char from[])
</program>
y para calcular el largo de un string se puede usar
<program>
int strlen(char s[])
</program>
<i>Ejemplo</i>: Imprime la línea más larga.
<program maxlinea3.c>
/* Programa que imprime la línea más larga */

#include <stdio.h>
#include <string.h>

#define MAXLINEA 1000

main()
  {
    int largo, maxlargo;
    char linea[MAXLINEA], larga[MAXLINEA];

    maxlargo=0;
    while(fgets(linea, MAXLINEA, stdin)!=NULL)
      {
        largo=strlen(linea);
        if(largo>maxlargo)
          {
            maxlargo=largo;
            strcpy(larga, linea);
          }
      }

    printf("La línea más larga es:\n%s\n", larga);
  }
</program>
<p>
<a name="6"><h2>Variables externas</h2></a>
<p>
Las variables declaradas fuera de las funciones son
almacenadas estáticamente y pueden ser accesadas desde las funciones.
<p>
<i>Ejemplo</i>:
<program>
int x;

f()
  {
    extrn x;

    /* aquí se puede usar x */
  }
</program>
La declaración dentro de la función se puede omitir si la declaración
externa está dentro del mismo archivo.
<p>
<a name="7"><h2>Conversiones de caracteres</h2></a>
<p>
Al incluir el archivo
<program>
#include <stdlib.h>
</program>
se pueden utilizar funciones como <tt><b>atoi(s)</b></tt>, que convierte
un string a entero ("ascii to int"), <tt><b>atol(s)</b></tt> ("ascii
to long"), etc.
<p>
La siguiente es una implementación posible de <tt><b>atoi</b></tt>:
<program>
/* atoi: convierte string ascii a entero */
int atoi(char s[])
  {
    int i, n;

    n=0;
    for(i=0; s[i]>='0' && s[i]<='9'; ++i)
        n=n*10+(s[i]-'0');

    return n;
  }
</program>
Al incluir el archivo
<program>
#include <ctype.h>
</program>
se pueden utilizar funciones como <tt><b>tolower(c)</b></tt>, que convierte
un caracter de mayúscaulas a minúsculas, <tt><b>isdigit(c)</b></tt>,
que dice si el carácter es un dígito decimal, <tt><b>isalpha(c)</b></tt>,
que dice si es un carácter alfabético, etc.
<p>
<i>Ejemplo</i>: Implementación de <tt><b>tolower</b></tt>:
<program>
int tolower(int c)
  {
    if(c>='A' && c<='Z')
        c=c-'A'+'a';

    return c;
  }
</program>
<p>
<a name="8"><h2>Operaciones con bits</h2></a>
<p>
Los enteros se almacenan internamente en binario. Por ejemplo:
<pre>
(2001)<sub>10</sub> = (111 1101 0001)<sub>2</sub>

         = 2<sup>10</sup>+2<sup>9</sup>+2<sup>8</sup>+2<sup>7</sup>+2<sup>6</sup>+2<sup>4</sup>+2<sup>1</sup>

         = 1024+512+256++128+64+16+1
</pre>
<p>
En C se usa notación octal y hexadecimal. En octal, los bits se agrupan de
a 3:
<pre>
(2001)<sub>10</sub> = (11 111 010 001)<sub>2</sub> = (3721)<sub>8</sub> = 0317
</pre>
y en hexadecimal se agrupan de a 4:
<pre>
(2001)<sub>10</sub> = (111 1101 0001)<sub>2</sub> = (7d1)<sub>16</sub> = 0x7d1
</pre>
<p>
<b>Operadores binarios </b>
<table>
<tr><td><tt><b>&amp;</b></tt></td><td>and</td></tr>
<tr><td><tt><b>|</b></tt></td><td>or</td></tr>
<tr><td><tt><b>^</b></tt></td><td>xor</td></tr>
<tr><td><tt><b>&lt;&lt;</b></tt></td><td>shift left</td></tr>
<tr><td><tt><b>>></b></tt></td><td>shift right</td></tr>
<tr><td><tt><b>~</b></tt></td><td>complement</td></tr>
</table>
<p>
<i>Ejemplos</i>:
<program>
n = n & 0x7f;      /* deja sólo los 7 bits inferiores */
x = x | MASK;      /* enciende todos los bits en 1 de MASK */
x = x & ~MASK;     /* apaga todos los bits que están en 1 en MASK */
</program>
<p>
<i>Ejemplo</i>: Otra implementación para <tt><b>tolower</b></tt>.
<br>
Considerando que las el rango <tt>A..Z</tt> es <tt>0x41..0x5A</tt>
y que el rango <tt>a..z</tt> es <tt>0x61..0x7A</tt>, entonces
podemos escribir:
<program>
int tolower(int c)
  {
    if(c>='A' && c<='Z')
        c |= 0x20;

    return c;
  }
</program>
<p>
<a name="9"><h2>Prioridad de Operadores</h2></a>
<p>
<table>
<tr><th>Operadores</th><th>Asociatividad</th></tr>
<tr><td><tt>()  []  ->  .</tt></td><td>izquierda</td></tr>
<tr><td><tt>!  ~  ++  --  +  -  *  &amp;  (tipo)  sizeof</tt></td><td>derecha</td></tr>
<tr><td><tt>*  /  %</tt></td><td>izquierda</td></tr>
<tr><td><tt>+  -</tt></td><td>izquierda</td></tr>
<tr><td><tt>&lt;&lt;  >></tt></td><td>izquierda</td></tr>
<tr><td><tt>&lt;  &lt;= >  >=</tt></td><td>izquierda</td></tr>
<tr><td><tt>==  !=</tt></td><td>izquierda</td></tr>
<tr><td><tt>&amp;</tt></td><td>izquierda</td></tr>
<tr><td><tt>^</tt></td><td>izquierda</td></tr>
<tr><td><tt>|</tt></td><td>izquierda</td></tr>
<tr><td><tt>&amp;&amp;</tt></td><td>izquierda</td></tr>
<tr><td><tt>||</tt></td><td>izquierda</td></tr>
<tr><td><tt>?:</tt></td><td>derecha</td></tr>
<tr><td><tt>=  +=  -=  *=  /=  %=  &amp;=  ^=  |=  &lt;&lt;=  >>=</tt></td><td>derecha</td></tr>
<tr><td><tt>,</tt></td><td>izquierda</td></tr>
</table>
<p>
<a name="10"><h2>Instrucciones de Control</h2></a>
<p>
C tiene esencialmente las mismas instrucciones de control que ya hemos visto
en Java:
<program>
if
while
break
continue
...
</program>
<p>
Además existe una instrucción <tt><b>goto</b></tt> que se usa
com muy poca frecuencia.
<p>
La instrucción <tt><b>switch</b></tt> permite seleccionar entre
múltiples casos:
<program>
switch( expr )
  {
case valor<sub>1</sub>:
    ...
    ...
    break;  /* de lo contrario sigue de largo */

case valor<sub>2</sub>:
    ...
    ...
    break;  /* de lo contrario sigue de largo */

    ...
  }
</program>
<p>
La instrucción <tt><b>do</b></tt> es similar al <tt><b>while</b></tt>,
pero la comparación se hace al final de cada iteración:
<program>
do
    ...
    ...
until( expr );
</program>
<p>
<a name="11"><h2>Punteros y Arreglos</h2></a>
<p>
La siguiente instrucción asigna a <tt><b>p</b></tt> un puntero
a la variable <tt><b>x</b></tt>:
<program>
int x;
int *p;

p = &x;  /* p apunta a x */
</program>
<p>
La operación opuesta permite obtener el valor apuntado por <tt><b>p</b></tt>:
<program>
y = *p;  /* Equivalente a y=x */

*p = 0;  /* Equivalente a x=0 */
</program>
<p>
Esto permite escribir una función que interambia los valores de sus
dos parámetros:
<p>
<program intercambia.c>
void intercambia(int *px, int *py)
  {
    int aux;

    aux=*px;
    *px=*py;
    *py=aux;
  }

main()
  {
    int a=1, b=2;

    printf("ANTES:   a=%d b=%d\n", a, b);

    intercambia(&a, &b);  /* NO intercambia(a, b) */

    printf("DESPUES: a=%d b=%d\n", a, b);
  }
</program>
<p>
<b>Relación con arreglos</b>
<p>
<program>
int a[10];
int *p;
</program>
<p>
<center>
<table border=1>
<tr>
<td><tt>a[0]</tt></td>
<td><tt>a[1]</tt></td>
<td><tt>....</tt></td>
<td><tt>a[9]</tt></td>
</table>
</center>
<p>
<program>
p = &a[0];  /* p apunta al primer elemento de a */

printf("%d\n", *(p+1));  /* imprime a[1] */

printf("%d\n", *(p+i));  /* imprime a[i] */
</program>
<p>
Además
<program>
p = &a[0];
</program>
es equivalente a
<program>
p = a;
</program>
de modo que
<pre><b>
        *(a+i)  <i>es equivalente a</i>  a[i]
</b></pre>
<p>
<i>Ejemplo</i>: Cálculo del largo de un string
<program largo.c>
int my_strlen(char *s)
  {
    int n;

    for(n=0; *s!='\0'; ++s)
        ++n;

    return n;
  }

main()
  {
    printf("%d\n", my_strlen("hola"));
  }
</program>
<p>
Implementación alternativa usando aritmética de punteros:
<program largo2.c>
int my_strlen(char *s)
  {
    char *p=s;

    while(*p!='\0')
        ++p;

    return p-s;
  }

main()
  {
    printf("%d\n", my_strlen("hola"));
  }
</program>
<p>
<b><tt>Strcpy</tt> con y sin punteros</b>
<p>
<program copias1.c>
/* Versión con arreglos */

void my_strcpy(char *s, char *t)
  {
    int i;

    i=0;
    while((s[i]=t[i])!='\0')
        ++i;
  }

main()
  {
    char a[10];

    strcpy(a, "hola");
    printf("%s\n", a);
  }
</program>
<p>
<program copias2.c>
/* Versión con punteros */

void my_strcpy(char *s, char *t)
  {
    int i;

    while((*s=*t)!='\0')
      {
        ++s;
        ++t;
      }
  }

main()
  {
    char a[10];

    strcpy(a, "hola");
    printf("%s\n", a);
  }
</program>
<p>
<program copias3.c>
/* Versión con punteros (más compacta) */

void my_strcpy(char *s, char *t)
  {
    int i;

    while((*s++=*t++)!='\0')
        ;
  }

main()
  {
    char a[10];

    strcpy(a, "hola");
    printf("%s\n", a);
  }
</program>
<p>
<program copias4.c>
/* Versión con punteros (más compacta todavía) */

void my_strcpy(char *s, char *t)
  {
    int i;

    while(*s++=*t++)
        ;
  }

main()
  {
    char a[10];

    strcpy(a, "hola");
    printf("%s\n", a);
  }
</program>


</BODY>
</HTML>
